{"remainingRequest":"C:\\projects\\skopljakmirko\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\projects\\skopljakmirko\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\projects\\skopljakmirko\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\projects\\skopljakmirko\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"C:\\projects\\skopljakmirko\\src\\App.vue","mtime":1614868089515},{"path":"C:\\projects\\skopljakmirko\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projects\\skopljakmirko\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\projects\\skopljakmirko\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projects\\skopljakmirko\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}